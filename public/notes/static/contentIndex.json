{"Templater":{"slug":"Templater","filePath":"Templater.md","title":"Templater","links":["Templater"],"tags":["obsidian"],"content":"Templater is an Obsidian extension that can be used to automate the creation of notes and automatically sort them based on prompts. i use it extensively to quickly create literature notes.\nsystem prompts with Templater\nwhen using the templater extension, you can add prompts to create variables that can used in the created note. so when you make a new note using templater, a modal will pop up asking you for the desired variable. this can save a lot of time if a certain variable is used in multiple places throughout a note. to add prompts, use the const variableName = await tp.system.prompt(&quot;Variable Name&quot;) to the top of the template. here’s an example i use in my TV episode template.\n&lt;%*\nconst seriesName = await tp.system.prompt(&quot;Series Name&quot;)\nconst episodeNumber = await tp.system.prompt(&quot;Episode Number&quot;)\nconst URL = await tp.system.prompt(&quot;URL&quot;)\nconst publishDate = await tp.system.prompt(&quot;Published Date (YYYY-MM-DD)&quot;)\n%&gt;\nautomatically sort notes with Templater\nyou can automatically move a note when creating it with the templater plugin using tp.file.move. here’s a simple example, where title is a variable created with a system prompt.\n&lt;%*\t\n\tawait tp.file.move(&quot;/desired folder/&quot; + title)\n%&gt;\nyou can even automatically create folders using already created variables. for example, this is part of the code in my TV episode template. it automatically renames the note to “Episode {episodeNumber}” and moves it into a folder with the series name, creating the folder if it doesn’t exist already.\n&lt;%*\n// rename file\ntitleName = &quot;Episode &quot; + episodeNumber;\nawait tp.file.rename(titleName);\n \n// make the directory a folder with the name of the series inside the tv show literature note folder\nconst dir = &quot;/020 literature notes/tv/&quot; + seriesName;\n \n// if directory doesn&#039;t exist\nif (!tp.file.exists(dir)) {\n\t// create the folder\n\tawait this.app.vault.createFolder(dir);\n}\n \n// move current note to the series folder\nawait tp.file.move(dir + &quot;/&quot; + titleName, tp.file.find_tfile(titleName))\n%&gt;\ncreating another note using Templater\nyou can use the function tp.file.create_new inside of a template to create an additional file when creating a file using templater. when i make a literature note, i use it to automatically create another note that lists every note from that source. for example, if i make a note for a TV episode, the following code will check if a note with the series name already exists. if not, it creates another note using the template TV Series Template and automatically sorts it into the folder with my episode notes (the variables .\n// check if a note with the series name exists\nconst existing = tp.file.find_tfile(seriesName);\n \n// if it doesn&#039;t exist\nif (!existing) {\n\t\n\t// get the series template file content\n\tconst templateName = &quot;TV Series Template&quot;\n\tlet templateFile = await tp.file.find_tfile(templateName);\n\tlet templateContent = await app.vault.read(templateFile);\n\t\n\t// create series note\n\tawait tp.file.create_new(templateContent, seriesName, false, dir);\n}\nthe note for the series uses dataview to display a table of all the episodes i’ve already taken notes on (replace the “ with ```)\n---\ncategory: tv\ntype: series\nseries: &quot;&lt;% tp.file.title %&gt;&quot;\ntags: format/tv, type/series \n---\n# &lt;% tp.file.title %&gt;\n \n``dataview\n\ttable published as &quot;Date Aired&quot;\n\twhere show = &quot;&lt;% tp.file.title %&gt;&quot;\n\tsort file asc\n``\n \n---\n[[TV Shows]]"},"configuring-yomitan-for-thai":{"slug":"configuring-yomitan-for-thai","filePath":"configuring yomitan for thai.md","title":"configuring yomitan for thai","links":[],"tags":["language_learning/thai"],"content":"dictionaries\nthe dictionaries i use are:\n\nkaikki th-th and th-en\napple th-en\nJTDIC th-jp\nLexitron th-en\nvolubilis th-en\nroyal institute dictionary th-th\nIsan-Thai-English dictionary th-th-en\nplant names th-en\npleang na nakoen th-th\njones th-en\nabbreviations th-th\n\nthe unlinked dictionaries were sourced from thai dictionaries project and converted using pyglossary. you can download all these dictionaries in one file here. to import, go to the settings page of yomitan, scroll down to “backup”, click “import dictionary collection”, then select the json file downloaded earlier. to enable them, scroll up to “dictionaries” then click on “configure installed and enabled dictionaries…”. enable all of them. i recommend putting the kaikki dictionaries on top since they have the best coverage and nicest formatting imo.\nyomitan settings\n\nin “general”, set language to thai.\nin “appearance”, set the font to something that’s compatible with thai (i prefer ibm plex sans thai). i recommend setting the font size and line height bigger, like 24px and 1.5. click “configure custom css” then add this under “popup css” to make the head word less big when increasing the font size.\n\n:root {\n--headword-font-size-no-units: 1.75;\n}\n \n.actions {\nfont-size: 16px;\n}\n\nin “popup position and size”, i recommend increasing the size if you increased the font. i use 650x600px.\nin “audio”, enable languagepod101. you can also get forvo audio using this anki extension.\nin “translation”, click “configure custom text replacement patterns”. add the following replacements:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatternreplacement(.)ํา$1ำ\\s"},"hiding-hard-subtitles":{"slug":"hiding-hard-subtitles","filePath":"hiding hard subtitles.md","title":"hiding hard subtitles","links":[],"tags":["language_learning","linux"],"content":"i use the python progam subtitle hider to blur english subtitles hardcoded into videos i want to watch in a language i’m learning. under “releases” there’s also a precompiled windows .exe. since it creates a new window, it’s compatible with any video player app, website, etc.\nin hyprland, i use the following settings to launch the program with a keybind using my preferred settings and location. (the title has been changed from main.py to subtitle_hider.py and saved in ~/scripts)\nin my window rules configuration:\nwindowrule = float, title:subtitle_hider.py\nwindowrule = opacity 0.3 override 0.5 override, title:subtitle_hider.py\nwindowrule = xray 0, title:subtitle_hider.py\nwindowrule = noshadow, title:subtitle_hider.py\nwindowrule = noborder, title:subtitle_hider.py\nwindowrule = noblur, focus:1,title:subtitle_hider.py\nwindowrule = move onscreen 11% 71%, title:subtitle_hider.py\nwindowrule = size 78% 6%, title:subtitle_hider.py \nin my user binds configuration:\nbind = $mainMod SHIFT, H, exec, python $HOME/scripts/subtitle_hider.py # launch window that blurs part of the screen (for hiding hard subs)\nthis is what it looks like in action. you can see that on hover the blur effect is turned off and it can be freely moved and resized. the color of the window can be set to white, black, or transparent (blur only).\n\nvideo: บุกญี่ปุ่น หลัง Lost Decades เศรษฐกิจหลุดเงามืดแล้ว จริงหรือไม่ ? | INSIGHTS ON JAPAN ECONOMY EP.1 - YouTube\nprogram to show keystrokes: GitHub - AlynxZhou/showmethekey: Show keys you typed on screen."},"index":{"slug":"index","filePath":"index.md","title":"welcome to my notebook","links":["tags/language_learning","tags/site_building","tags/linux"],"tags":["language_learning","site_building","linux"],"content":"this section of my site is a repository of random notes mostly related to language_learning , site_building , and linux . i’m pretty bad at remember how i did things or the exact names of commands, so i end up documenting everything i do so i can replicate things later. most of the improvements and optimizations i’ve made to my site were made after coming across blog posts and coding tip sections on random peoples sites, and i’ve found reading other people’s documentation of their own workflow to be extremely helpful in learning how to use tools like eleventy and deploy to neocities, so i thought i ought to pay it back and learn in public for anyone who may stumble across my own website."},"normalizing-audio":{"slug":"normalizing-audio","filePath":"normalizing audio.md","title":"normalizing audio","links":["updating-ffmpeg"],"tags":["language_learning","linux"],"content":"i use ffmpeg to normalize the audio of my media files, particularly anything i want to sentence mine. i also like to normalize my anki media folder every month or so. be sure you’re on an up-to-date build of ffmpeg to use the following methods. (see updating ffmpeg for how i updated ffmpeg on pop os, which should work on other debian based distributions)\nbatch normalize audio files\nto batch normalize audio files, install ffmpeg-normalize using pip install ffmpeg-normalize. inside the folder, run”\nffmpeg-normalize *.mp3 -c:a libmp3lame -ext mp3 -pr\nmp3gain can be used change gain without the need to reencode the track. i like to use this in my anki media folder since it is much faster than ffmpeg-normalize. the link has downloads for windows, but on linux it can be installed from your distro’s repository. to run from the command line:\nmp3gain -r -k -s r *.mp3\nnormalize video audio\nfor a single video:\nffmpeg -i infile.mp4 -filter:a speechnorm,loudnorm -c:a ac3 -c:v copy out.mp4 \nto run the above command on a whole folder in linux or mac, use:\nfor i in *.mkv; do ffmpeg -i &quot;$i&quot; -filter:a speechnorm,loudnorm -c:a ac3 -c:v copy &quot;normalized/$i&quot;; done\nor\nffmpeg-normalize *.mkv -c:a ac3 --dynamic --progress\nthe normalized videos will have the same name but will be in the subfolder titled “normalized”"},"updating-ffmpeg":{"slug":"updating-ffmpeg","filePath":"updating ffmpeg.md","title":"updating ffmpeg","links":["video-to-avif","normalizing-audio"],"tags":["linux"],"content":"the version of ffmpeg that comes installed on pop os 22.04 is version 4.4.2, which doesn’t come with libsvtav1 to make avif files and doesn’t work well with ffmpeg-normalize. i followed this tutorial to install it but got the version here. also see another av1 encoding tutorial here.\nsudo apt remove ffmpeg\nsudo mkdir -p /opt/ffmpeg\ncd /opt/ffmpeg\nsudo wget github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz\nsudo tar xvf ffmpeg-master-latest-linux64-gpl.tar.xz\ncd ffmpeg-*-gpl/bin/\nsudo ln -s &quot;${PWD}/ffmpeg&quot; /usr/bin/\nsudo ln -s &quot;${PWD}/ffprobe&quot; /usr/bin/\nsudo ln -s &quot;${PWD}/ffplay&quot; /usr/bin/"},"video-to-avif":{"slug":"video-to-avif","filePath":"video to avif.md","title":"video to avif","links":["places","updating-ffmpeg"],"tags":["site_building"],"content":"i use avif files on my site wherever i want to convert a video to an animated image. avif files are significantly smaller than gifs while retaining much more quality, have pretty good support on modern browsers, can be used with the img html tag, and are able to be hosted on neocities even on free accounts. the backgrounds for my places page, for example, default to jpg then switch to avif if the detected browser supports the format.\nthe following method requires a version of ffmpeg which has the libsvtav1 encoder library. see updating ffmpeg for a link to the ffmpeg build i use (includes builds for windows and linux) as well as how to update ffmpeg on pop os and other debian based distros. you can also use ezgif.com to convert videos to avif. ezgif also supports converting gifs to avif, but if you have the original video file i would highly suggesting using that as the step from video to gif introduces a lot of extra noise, which if you then convert to avif would lead to a larger image size and worse quality than if you had converted the video straight to avif. if you color your gifs in photoshop, you can export to mp4 instead of gif.\nbasic command\nffmpeg -hide_banner -i &quot;input.mkv&quot; -c:v libsvtav1 &quot;output.avif&quot;\nan example with time trimming and scaling\nffmpeg -hide_banner -ss 11.736986301369864 -to 24.095362 -i &quot;input.mp4&quot; -vf &quot;scale=640:-2&quot; -c:v libsvtav1 &quot;output.avif&quot;\nan example with time trimming, cropping, scaling, and extra compression\nffmpeg -hide_banner -ss 00:00:26 -to 00:00:53 -i input.mp4 -vf &quot;crop=in_w-4:in_h-22:2:0,scale=850:-2&quot; -c:v libsvtav1 -crf 40 -preset 6 &quot;output.avif&quot;\nbatch convert\nwindows\nwhen i used windows i kept the following in a .ps1 file\nforeach ($f in gci *.mp4) { ffmpeg -hide_banner -i $f -c:v libsvtav1 &quot;$($f.basename).avif&quot; }\nlinux\nfor f in *.mp4; do ffmpeg -i &quot;$f&quot; -c:v libsvtav1 &quot;$(&quot;$f&quot;.basename).avif&quot;; done"}}