{"hiding-hard-subtitles":{"slug":"hiding-hard-subtitles","filePath":"hiding hard subtitles.md","title":"hiding hard subtitles","links":[],"tags":["language_learning","linux"],"content":"hiding hard subtitles\ni use subtitle hider to blur english subtitles hardcoded into videos i want to watch in a language i’m learning. since it creates a new window, it’s compatible with any video player app, website, etc.\nin hyprland, i use the following settings to launch the program with a keybind using my preferred settings and location. (the title has been changed from main.py to subtitle_hider.py and saved in ~/scripts)\nin my window rules configuration:\nwindowrule = float, title:subtitle_hider.py\nwindowrule = opacity 0.3 override 0.5 override, title:subtitle_hider.py\nwindowrule = xray 0, title:subtitle_hider.py\nwindowrule = noshadow, title:subtitle_hider.py\nwindowrule = noborder, title:subtitle_hider.py\nwindowrule = noblur, focus:1,title:subtitle_hider.py\nwindowrule = move onscreen 11% 71%, title:subtitle_hider.py\nwindowrule = size 78% 6%, title:subtitle_hider.py \nin my user binds configuration:\nbind = $mainMod SHIFT, H, exec, python $HOME/scripts/subtitle_hider.py # launch window that blurs part of the screen (for hiding hard subs)\nthis is what it looks like in action:\n\nvideo: บุกญี่ปุ่น หลัง Lost Decades เศรษฐกิจหลุดเงามืดแล้ว จริงหรือไม่ ? | INSIGHTS ON JAPAN ECONOMY EP.1 - YouTube\nprogram to show keystrokes: GitHub - AlynxZhou/showmethekey: Show keys you typed on screen."},"index":{"slug":"index","filePath":"index.md","title":"welcome to my notebook","links":[],"tags":[],"content":"this section of my site is a repository of random notes mostly related to language learning, coding, and linux. i’m pretty bad at remember how i did things or the exact names of commands, so i end up documenting everything i do so i can replicate things later. most of the improvements and optimizations i’ve made to my site were made after coming across blog posts and coding tip sections on random peoples sites, and i’ve found reading other people’s documentation of their own workflow to be extremely helpful in learning how to use tools like eleventy and deploy to neocities, so i thought i ought to pay it back and learn in public for anyone who may stumble across my own website."},"normalizing-audio":{"slug":"normalizing-audio","filePath":"normalizing audio.md","title":"normalizing audio","links":["updating-ffmpeg"],"tags":["linux","language_learning"],"content":"normalizing audio\ni use ffmpeg to normalize the audio of my media files, particularly anything i want to sentence mine. i also like to normalize my anki media folder every month or so. be sure you’re on an up-to-date build of ffmpeg to use the following methods. (see updating ffmpeg for how i updated ffmpeg on pop os, which should work on other debian based distributions)\nbatch normalize audio files\nto batch normalize audio files, install ffmpeg-normalize using pip install ffmpeg-normalize. inside the folder, run”\nffmpeg-normalize *.mp3 -c:a libmp3lame -ext mp3 -pr\nmp3gain can be used change gain without the need to reencode the track. i like to use this in my anki media folder since it is much faster than ffmpeg-normalize. the link has downloads for windows, but on linux it can be installed from your distro’s repository. to run from the command line:\nmp3gain -r -k -s r *.mp3\nnormalize video audio\nfor a single video:\nffmpeg -i infile.mp4 -filter:a speechnorm,loudnorm -c:a ac3 -c:v copy out.mp4 \nto run the above command on a whole folder in linux or mac, use:\nfor i in *.mkv; do ffmpeg -i &quot;$i&quot; -filter:a speechnorm,loudnorm -c:a ac3 -c:v copy &quot;normalized/$i&quot;; done\nor\nffmpeg-normalize *.mkv -c:a ac3 --dynamic --progress\nthe normalized videos will have the same name but will be in the subfolder titled “normalized”"},"updating-ffmpeg":{"slug":"updating-ffmpeg","filePath":"updating ffmpeg.md","title":"updating ffmpeg","links":["video-to-avif","normalizing-audio"],"tags":["linux"],"content":"updating ffmpeg\nthe version of ffmpeg that comes installed on pop os 22.04 is version 4.4.2, which doesn’t come with libsvtav1 to make avif files and doesn’t work well with ffmpeg-normalize. i followed this tutorial to install it but got the version here. also see another av1 encoding tutorial here.\nsudo apt remove ffmpeg\nsudo mkdir -p /opt/ffmpeg\ncd /opt/ffmpeg\nsudo wget github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz\nsudo tar xvf ffmpeg-master-latest-linux64-gpl.tar.xz\ncd ffmpeg-*-gpl/bin/\nsudo ln -s &quot;${PWD}/ffmpeg&quot; /usr/bin/\nsudo ln -s &quot;${PWD}/ffprobe&quot; /usr/bin/\nsudo ln -s &quot;${PWD}/ffplay&quot; /usr/bin/"},"video-to-avif":{"slug":"video-to-avif","filePath":"video to avif.md","title":"video to avif","links":["updating-ffmpeg"],"tags":["site_building"],"content":"video to avif\ni use avif files on my site wherever i want to convert a video to an animated image. avif files are significantly smaller than gifs while retaining much more quality, have pretty good support on modern browsers, can be used with the img html tag, and are able to be hosted on neocities even on free accounts.\nthe following method requires a version of ffmpeg which has the libsvtav1 encoder library. see updating ffmpeg for a link to the ffmpeg build i use (includes builds for windows, mac, and linux) as well as how to update ffmpeg on pop os and other debian based distros. you can also use ezgif.com to convert videos to avif. ezgif also supports converting gifs to avif, but if you have the original video file i would highly suggesting using that as the step from video to gif introduces a lot of extra noise, which if you then convert to avif would lead to a larger image size and worse quality than if you had converted the video straight to avif. if you color your gifs in photoshop, you can export to mp4 instead of gif.\nbasic command\nffmpeg -hide_banner -i &quot;input.mkv&quot; -c:v libsvtav1 &quot;output.avif&quot;\nwith scaling and time trimming\nffmpeg -hide_banner -ss 11.736986301369864 -to 24.095362 -i &quot;input.mp4&quot; -vf &quot;scale=640:-2&quot; -c:v libsvtav1 &quot;output.avif&quot;\nbatch convert\nwindows\nwhen i used windows i kept the following in a .ps1 file\nforeach ($f in gci *.mp4) { ffmpeg -hide_banner -i $f -c:v libsvtav1 &quot;$($f.basename).avif&quot; }\nlinux\nfor f in *.mp4; do ffmpeg -i &quot;$f&quot; -c:v libsvtav1 &quot;$(&quot;$f&quot;.basename).avif&quot;; done"}}