{"index":{"title":"welcome to my notebook","links":[],"tags":[],"content":"this section of my site is a repository of notes i created while learning how to code my site. i’m pretty bad at remember how i did things or the exact names of commands, so i end up documenting everything i do so i can replicate things later. most of the improvements and optimizations i’ve made to my site were made after coming across blog posts and coding tip sections on random peoples sites, and i’ve found reading other people’s documentation of their own workflow to be extremely helpful in learning how to use tools like eleventy and deploy to neocities, so i thought i ought to pay it back and learn in public for anyone who may stumble across my own website. i also publish some of my notes on things not specific to website building if i think they may be of interest to others."},"layout":{"title":"Layout","links":["component","creating-components","configuration"],"tags":[],"content":"Certain emitters may also output HTML files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in quartz.layout.ts.\nEach page is composed of multiple different sections which contain QuartzComponents. The following code snippet lists all of the valid sections that you can add components to:\nquartz/cfg.tsexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  left: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  footer: QuartzComponent // single component\n}\nThese correspond to following parts of the page:\n\n\n\n                  \n                  Note\n                  \n                \nThere are two additional layout fields that are not shown in the above diagram.\n\nhead is a single component that renders the &lt;head&gt; tag in the HTML. This doesn’t appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\nheader is a set of components that are laid out horizontally and appears before the beforeBody section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn’t place any components in the header.\n\n\nQuartz components, like plugins, can take in additional properties as configuration options. If you’re familiar with React terminology, you can think of them as Higher-order Components.\nSee a list of all the components for all available components along with their configuration options. You can also checkout the guide on creating components if you’re interested in further customizing the behaviour of Quartz.\nStyle\nMost meaningful style changes like colour scheme and font can be done simply through the general configuration options. However, if you’d like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses Sass for styling.\nYou can see the base style sheet in quartz/styles/base.scss and write your own in quartz/styles/custom.scss.\n\n\n                  \n                  Note\n                  \n                \nSome components may provide their own styling as well! For example, quartz/components/Darkmode.tsx imports styles from quartz/components/styles/darkmode.scss. If you’d like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n"},"migrating-from-Quartz-3":{"title":"Migrating from Quartz 3","links":["configuration","hosting","folder-and-tag-listings","creating-components"],"tags":[],"content":"As you already have Quartz locally, you don’t need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\ngit fetch\ngit checkout v4\ngit pull upstream v4\nnpm i\nnpx quartz create\nIf you get an error like fatal: &#039;upstream&#039; does not appear to be a git repository, make sure you add upstream as a remote origin:\ngit remote add upstream github.com/jackyzha0/quartz.git\nWhen running npx quartz create, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n\n                  \n                  Note\n                  \n                \nIf the existing content folder you’d like to use is at the same path on a different branch, clone the repo again somewhere at a different path in order to use it.\n\nKey changes\n\nRemoving Hugo and hugo-obsidian: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\nFull-hot reload: The many rough edges of how hugo-obsidian integrated with Hugo meant that watch mode didn’t re-trigger hugo-obsidian to update the content index. This lead to a lot of weird cases where the watch mode output wasn’t accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\nReplacing Go template syntax with JSX: Quartz 3 used Go templates to create layouts for pages. However, the syntax isn’t great for doing any sort of complex rendering (like text processing) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\nA new extensible configuration and plugin system: Quartz 3 was hard to configure without technical knowledge of how Hugo’s partials worked. Extensions were even hard to make. Quartz 4’s configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\nThings to update\n\nYou will need to update your deploy scripts. See the hosting guide for more details.\nEnsure that your default branch on GitHub is updated from hugo to v4.\nFolder and tag listings have also changed.\n\nFolder descriptions should go under content/&lt;folder-name&gt;/index.md where &lt;folder-name&gt; is the name of the folder.\nTag descriptions should go under content/tags/&lt;tag-name&gt;.md where &lt;tag-name&gt; is the name of the tag.\n\n\nSome HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\nIf you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on creating components for more details on this.\n"},"philosophy":{"title":"Philosophy of Quartz","links":[],"tags":[],"content":"A garden should be a true hypertext\n\nThe garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n(The Garden and the Stream)\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes?\nThe ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\nA garden should be shared\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\nQuartz is designed first and foremost as a tool for publishing digital gardens to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n— Richard Hamming\n\nThe goal of Quartz is to make sharing your digital garden free and simple.\n\nA garden should be your own\nAt its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they’d like it to work.\n\nIf you like the default configuration of Quartz and just want to change the content, the only thing that you need to change is the contents of the content folder.\nIf you’d like to make basic configuration tweaks but don’t want to edit source code, one can tweak the plugins and components in quartz.config.ts and quartz.layout.ts in a guided manner to their liking.\nIf you’d like to tweak the actual source code of the underlying plugins, components, or even build process, Quartz purposefully ships its full source code to the end user to allow customization at this level too.\n\nMost software either confines you to either\n\nMakes it easy to tweak content but not the presentation\nGives you too many knobs to tune the presentation without good opinionated defaults\n\nQuartz should feel powerful but ultimately be an intuitive tool fully within your control. It should be a piece of agentic software. Ultimately, it should have the right affordances to nudge users towards good defaults but never dictate what the ‘correct’ way of using it is."},"setting-up-your-GitHub-repository":{"title":"Setting up your GitHub repository","links":["/"],"tags":[],"content":"First, make sure you have Quartz cloned and setup locally.\nThen, create a new repository on GitHub.com. Do not initialize the new repository with README, license, or gitignore files.\n\nAt the top of your repository on GitHub.com’s Quick Setup page, click the clipboard to copy the remote repository URL.\n\nIn your terminal of choice, navigate to the root of your Quartz folder. Then, run the following commands, replacing REMOTE-URL with the URL you just copied from the previous step.\n# list all the repositories that are tracked\ngit remote -v\n \n# if the origin doesn&#039;t match your own repository, set your repository as the origin\ngit remote set-url origin REMOTE-URL\n \n# if you don&#039;t have upstream as a remote, add it so updates work\ngit remote add upstream github.com/jackyzha0/quartz.git\nThen, you can sync the content to upload it to your repository. This is a helper command that will do the initial push of your content to your repository.\nnpx quartz sync --no-pull\n\n\n                  \n                   fatal: --[no-]autostash option is only valid with --rebase\n                  \n                \nYou may have an outdated version of git. Updating git should fix this issue.\n\nIn future updates, you can simply run npx quartz sync every time you want to push updates to your repository.\n\n\n                  \n                  Flags and options \n                  \n                \nFor full help options, you can run npx quartz sync --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n--commit or --no-commit: whether to make a git commit for your changes\n--push or --no-push: whether to push updates to your GitHub fork of Quartz\n--pull or --no-pull: whether to try and pull in any updates from your GitHub fork (i.e. from other devices) before pushing\n\n"},"showcase":{"title":"Quartz Showcase","links":[],"tags":[],"content":"Want to see what Quartz can do? Here are some cool community gardens:\n\nQuartz Documentation (this site!)\nJacky Zhao’s Garden\nSocratica Toolbox\noldwinter の数字花园\nAaron Pham’s Garden\nThe Quantum Garden\nAbhijeet’s Math Wiki\nMatt Dunn’s Second Brain\nPelayo Arbues’ Notes\nVince Imbat’s Talahardin\n🧠🌳 Chad’s Mind Garden\nPedro MC Fernandes’s Topo da Mente\nMau Camargo’s Notkesto\nCaicai’s Novels\n🌊 Collapsed Wave\nSideny’s 3D Artist’s Handbook\nMike’s AI Garden 🤖🪴\nBrandon Boswell’s Garden\nScaling Synthesis - A hypertext research notebook\nData Dictionary 🧠\nsspaeti.com’s Second Brain\n🪴Aster’s notebook\n🥷🏻🌳🍃 Computer Science &amp; Thinkering Garden\nA Pattern Language - Christopher Alexander (Architecture)\n\nIf you want to see your own on here, submit a Pull Request adding yourself to this file!"},"upgrading":{"title":"Upgrading Quartz","links":["migrating-from-Quartz-3"],"tags":[],"content":"\n\n                  \n                  Note\n                  \n                \nThis is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the migration guide for more info.\n\nTo fetch the latest Quartz updates, simply run\nnpx quartz update\nAs Quartz uses git under the hood for versioning, updating effectively ‘pulls’ in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using git pull origin upstream).\n\n\n                  \n                  Hint\n                  \n                \nQuartz will try to cache your content before updating to try and prevent merge conflicts. If you get a conflict mid-merge, you can stop the merge and then run npx quartz restore to restore your content from the cache.\n\nIf you have the GitHub desktop app, this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the GitHub guide on resolving merge conflicts."}}